{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"https://strangers-things.herokuapp.com/api/\";\nconst COHORT_NAME = \"2206-FTB-ET-WEB-FT\";\nexport async function registerPerson(registerUsername, registerPassword) {\n  try {\n    console.log(registerUsername, registerPassword);\n    const response = await fetch(`${BASE_URL}${COHORT_NAME}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: registerUsername,\n          password: registerPassword\n        }\n      })\n    });\n    const result = await response.json();\n    return result.data.token;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function getAllPosts() {\n  try {\n    const response = await fetch(`${BASE_URL}${COHORT_NAME}/posts`);\n    const result = await response.json();\n    const posts = result.data.posts;\n    console.log(posts);\n    return posts;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport async function loginUser(Username, Password) {\n  try {\n    console.log(Username, Password);\n    const response = await fetch(`${BASE_URL}${COHORT_NAME}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: Username,\n          password: Password\n        }\n      })\n    });\n    const result = await response.json();\n    return result.data.token;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function getUserInfo(token) {\n  try {\n    const response = await fetch(`${BASE_URL}${COHORT_NAME}/users/me`, {\n      headers: {\n        'Content-Type': \"application/JSON\",\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json(); // const token = result.data.token\n\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function makeNewPost(title, description, price, location) {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`${BASE_URL}${COHORT_NAME}/posts`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: title,\n        description: description,\n        price: price,\n        location: location\n      }\n    })\n  });\n  console.log(response, \"response from makeNewPost\");\n  const result = await response.json();\n  return result;\n}","map":{"version":3,"names":["axios","BASE_URL","COHORT_NAME","registerPerson","registerUsername","registerPassword","console","log","response","fetch","method","headers","body","JSON","stringify","user","username","password","result","json","data","token","error","getAllPosts","posts","loginUser","Username","Password","getUserInfo","makeNewPost","title","description","price","location","localStorage","getItem","post"],"sources":["/Users/hunter/Desktop/2206-CourseWork/Week5/ST_HTN_3/src/api/index.js"],"sourcesContent":["import axios from \"axios\"\n\n\nconst BASE_URL = \"https://strangers-things.herokuapp.com/api/\"\nconst COHORT_NAME = \"2206-FTB-ET-WEB-FT\"\n\nexport async function registerPerson(registerUsername, registerPassword){\n  try{ \n    console.log(registerUsername, registerPassword)\n    const response = await \n        fetch(`${BASE_URL}${COHORT_NAME}/users/register`,\n        {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n          },\n        body: JSON.stringify({\n            user: {\n              username: registerUsername,\n              password: registerPassword\n            }\n          })\n        }\n        )\n        const result = await response.json();\n        return result.data.token\n    } catch (error){\n      throw error\n    }\n}\n\n \nexport async function getAllPosts() {\n        try {\n            const response = await fetch(`${BASE_URL}${COHORT_NAME}/posts`)\n            const result = await response.json()\n            const posts = result.data.posts\n            console.log(posts)\n            return posts\n        }\n        catch (error) {\n            console.error(error);\n\n       }\n}\n\nexport async function loginUser(Username, Password){\n  try{ \n    console.log(Username, Password)\n    const response = await \n        fetch(`${BASE_URL}${COHORT_NAME}/users/login`,\n        {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n          },\n        body: JSON.stringify({\n            user: {\n              username: Username,\n              password: Password\n            }\n          })\n        }\n        )\n        const result = await response.json();\n\n        return result.data.token\n    } catch (error){\n      throw error\n    }\n}\nexport async function getUserInfo(token){\n  try { \n    const response = await fetch(`${BASE_URL}${COHORT_NAME}/users/me`, {\n\n    headers: {\n      'Content-Type': \"application/JSON\",\n      'Authorization': `Bearer ${token}`\n    }})\n    \n    const result = await response.json()\n    // const token = result.data.token\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\nexport async function makeNewPost(title, description, price, location){\n  const token = localStorage.getItem(\"token\")\n  const response = await fetch(`${BASE_URL}${COHORT_NAME}/posts`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: title,\n        description: description,\n        price: price,\n        location: location\n      }\n  })\n})\n  console.log(response, \"response from makeNewPost\")\n  const result = await response.json()\n  return result\n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}